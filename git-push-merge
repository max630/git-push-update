#!/bin/sh

set -e

main()
{
    REMOTE="$1"
    REMOTE_BRANCH="$2"

    REPO_DIR=$(mktemp -d)
    trap finalize 0
    REPO="$REPO_DIR/merge-tmp-repo"
    git fetch -q "$REMOTE" +"$REMOTE_BRANCH":refs/push-merge/remote
    prepare_$UPDATE_TYPE "$REMOTE_BRANCH"
    git clone -q --no-checkout --shared . "$REPO"
    git push -q "$REPO" +HEAD:refs/heads/local +refs/push-merge/remote:refs/heads/remote
    echo "!/**" >"$REPO/.git/info/sparse-checkout"
    lsfiles_$UPDATE_TYPE refs/push-merge/remote HEAD | checkout_from_quote >>"$REPO/.git/info/sparse-checkout"
    (
        cd "$REPO"
        git config core.sparseCheckout true
        update_$UPDATE_TYPE remote local
        git push -q origin +HEAD:refs/push-merge/merged
    )

    if git -c advice.pushFetchFirst=false push -q "$REMOTE" refs/push-merge/merged:"$REMOTE_BRANCH"
    then :
    else
        git fetch -q "$REMOTE" +"$REMOTE_BRANCH":refs/push-merge/remote2
        old=$(git rev-parse refs/push-merge/remote)
        new=$(git rev-parse refs/push-merge/remote2)
        mrg=$(git rev-parse refs/push-merge/merged)
        if test "$new" != "$mrg"
        then
            if test "$old" != "$new"; then
                echo "Remote branch was updated by other user during preparing new updates"
                echo "please retry"
            fi
            exit 1
        fi
    fi
}

checkout_from_quote()
{
    sed -e 's/^"\(.*\)"$/\1/' \
        -e 's/(\\.)\+/*/g' \
        -e 's/ $/\\ /' \
        -e 's/^/\//'
}

prepare_MERGE()
{
    MERGE_REMOTE_BRANCH="$1"
    MERGE_LOCAL_HEAD=$(git rev-parse --symbolic-full-name HEAD | sed -e 's|^refs/heads/||')
}

update_MERGE()
{
    local dst src

    dst="$1"
    src="$2"

    # to prevent "error: Sparse checkout leaves no entry on working directory"
    git ls-tree -r --name-only "$dst" | head -1 | checkout_from_quote >>.git/info/sparse-checkout
    git update-ref "refs/remotes/$OPT_HOST/$MERGE_LOCAL_HEAD" "$src"
    git checkout -q --force -B "$MERGE_REMOTE_BRANCH" "$dst"
    git merge --no-ff --edit "$OPT_HOST/$MERGE_LOCAL_HEAD"
}

lsfiles_MERGE()
{
    local mergebase dst src

    dst="$1"
    src="$2"
    mergebase=$(git merge-base "$dst" "$src")
    git diff --name-only --no-renames "$mergebase".."$src"
}

prepare_REBASE()
{
    :
}

update_REBASE()
{
    local dst src

    dst="$1"
    src="$2"

    git ls-tree -r --name-only "$src" | head -1 | checkout_from_quote >>.git/info/sparse-checkout
    cat .git/info/sparse-checkout
    git checkout -f -B rebase "$src"
    git rebase --keep-empty --verbose "$dst"
}

lsfiles_REBASE()
{
    false TODO
}

finalize()
{
    git update-ref -d refs/push-merge/remote || true
    git update-ref -d refs/push-merge/remote2 || true
    git update-ref -d refs/push-merge/merged || true
    rm -rf "$REPO_DIR/merge-tmp-repo"
    rmdir "$REPO_DIR" || true
}

OPTS_SPEC="\
git push-merge [options] <remoteName> <remoteBranch>

--
h,help      Help

type!=      Update type to use [merge(default),rebase]
host!=      Host to be mentioned in merge message (hostname by default)"

# git push-merge remoteName branch
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@")"
OPT_HOST=
OPT_TYPE=merge
while test "$1" != "--"
do
    case "$1" in
    --host) OPT_HOST="$2"
        shift;;
    --type) OPT_TYPE="$2"
        shift;;
    *) echo "Unexpected option: $1" >/dev/stderr
        exit 1;;
    esac
    shift
done

case "$OPT_TYPE" in
merge) UPDATE_TYPE=MERGE;;
rebase) UPDATE_TYPE=REBASE;;
*) echo "Unknown update type: $type"
    exit 1;;
esac

if test -z "$OPT_HOST"
then
    OPT_HOST=$(hostname -s)
fi

main "$2" "$3"
