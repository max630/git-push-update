#!/bin/sh

set -e

if ! command -v mktemp >/dev/null
then
    mktemp()
    {
        local res
        if test "$#" -eq 1 -a "$1" = "-d"
        then
            res="$TMP/$RANDOM"
            if mkdir "$res"
            then
                printf "%s\n" "$res"
                return
            else
                echo "Fail to create temporary directory" >&2
                exit 1
            fi
        else
            echo "Unsupported mktemp invocation: $@" >&2
            exit 1
        fi
    }
fi

checkout_from_quote()
{
    sed -e 's/^"\(.*\)"$/\1/' \
        -e 's/(\\.)\+/*/g' \
        -e 's/ $/\\ /' \
        -e 's/^/\//'
}

# remote specified ==> use it
# not specified ==> take remote specified for HEAD, if it is defined
# always error if the tracking branch does not contain branch to push
resolve_remote_branch()
{
    local cmd remotename0 branchname branchname_full

    remotename0="$1"
    if test -n "$remotename0"
    then
        REMOTE_REF=$(git rev-parse --symbolic-full-name "$remotename0")
        case "$REMOTE_REF" in
        refs/remotes/*);;
        *)
            echo "Invalid remote: $remotename0"
            echo 1
            ;;
        esac
        cmd=$(git for-each-ref --shell --format='
            if test "$REMOTE_REF" -eq %(upstream)
            then
                if test -n "$branchname"
                then 
                    echo "Both \"$branchname\" and "%(refname:short)" track $REMOTE_REF"
                    exit 1
                fi
                branchname=%(refname:short)
            fi
            ' /refs/heads)
        eval "$cmd"
        if test -z "$branchname"
        then
            echo "No local branch track $REMOTE_REF"
            exit 1
        fi
    else
        branchname_full=$(git rev-parse --symbolic-full-name HEAD)
        if test -z "$branchname_full"
        then
            echo "Cannot find remote branch with detached head"
            exit 1
        fi
        cmd=$(git for-each-ref --shell --format='
            branchname=%(refname:short)
            REMOTE_REF=%(upstream)
            ' "$branchname_full")
        eval "$cmd"
    fi
    if ! git merge-base --is-ancestor "$UPDATE_HEAD" "$branchname"
    then
        echo "Commit to push $UPDATE_HEAD does not belong to branch tracking $REMOTE_REF"
        echo "Suspect mistake"
        exit 1
    fi
    REMOTE=$(git config branch."$branchname".pushRemote || git config branch."$branchname".remote)
    REMOTE_BRANCH=$(git config branch."$branchname".merge)
    if test -z "$REMOTE" -o -z "$REMOTE_BRANCH"
    then
        echo "Failed to find remote info for $branchname: $REMOTE,$REMOTE_BRANCH"
        exit 1
    fi
}

prepare_MERGE()
{
    local src

    if test -n "$1"
    then src="$1"
    else src=HEAD
    fi
    if test "$#" -gt 1
    then
        echo "Only 1 source branch is allowed for merge type"
        exit 1
    fi
    MERGE_LOCAL_NAME=$(git rev-parse --symbolic-full-name "$src" | sed -e 's|^refs/heads/||')
    if test -z "$MERGE_LOCAL_NAME"
    then
        echo "Cannot resolve local branch: $src"
        exit 1
    fi
    MERGE_LOCAL_HASH=$(git rev-parse --revs-only "$src")
    UPDATE_HEAD="$MERGE_LOCAL_HASH"
}

prepare2_MERGE()
{
    MERGE_REMOTE_BRANCH="$REMOTE_BRANCH"
}

ff_possible_MERGE()
{
    local actual_lp expect_lp

    actual_lp=$(git log --first-parent --pretty=format:%P "$REMOTE_CURRENT".."$UPDATE_HEAD"|tail -1|cut -d' ' -f1)
    expect_lp=$(git rev-parse --revs-only "$REMOTE_CURRENT")
    test "$actual_lp" = "$expect_lp"
}

update_MERGE()
{
    local dst src

    dst="$1"
    src="$MERGE_LOCAL_HASH"

    git update-ref "refs/remotes/$OPT_HOST/$MERGE_LOCAL_NAME" "$src"
    git checkout -q -B "$MERGE_REMOTE_BRANCH" "$dst"
    git merge --no-ff --edit "$OPT_HOST/$MERGE_LOCAL_NAME"
}

prepare_REBASE()
{
    local tmp

    if test "$#" -eq 0
    then set HEAD
    fi
    REBASE_HEAD=$(git rev-parse --revs-only "$@" | sed -e '/^\^[0-9a-f]\+$/d')
    REBASE_LIMIT=$(git rev-parse --revs-only "$@" | sed -e '/^[0-9a-f]\+$/d' -e 's/\^//')
    if test -z "$REBASE_HEAD"
    then
        echo "Cannot resolve source spec: $src"
        exit 1
    else
        tmp=$(git rev-parse --revs-only "$REBASE_HEAD")
        if test -z "$tmp"
        then
            echo "Cannot resolve source spec: $src"
            exit 1
        fi
    fi
    if test -n "$REBASE_LIMIT"
    then
        tmp=$(git rev-parse --revs-only "$REBASE_LIMIT")
        if test -z "$tmp"
        then
            echo "Cannot resolve source spec: $src"
            exit 1
        fi
    fi
    UPDATE_HEAD="$REBASE_HEAD"
}

prepare2_REBASE()
{
    local limit

    if test -z "$REBASE_LIMIT" -a "$OPT_NOFORKPOINT" != yes
    then REBASE_LIMIT=$(git merge-base --fork-point "$REMOTE_REF" "$UPDATE_HEAD")
    fi

    limit="${REBASE_LIMIT:-$REMOTE_CURRENT}"
    if git log --pretty=format:%p:%s "$limit".."$UPDATE_HEAD"|grep '^[^:]* [^:]*:'
    then
        echo "Cannot rebase merge commits" >&2
        exit 1
    fi
}

ff_possible_REBASE()
{
    test -z "$REBASE_LIMIT" && git merge-base --is-ancestor "$REMOTE_CURRENT" "$UPDATE_HEAD"
}

update_REBASE()
{
    local dst src changed

    dst="$1"
    src="$2"

    git branch -f rebase "$REBASE_HEAD"
    if test -n "$REBASE_LIMIT"
    then
        git rebase --keep-empty --onto "$dst" "$REBASE_LIMIT" rebase
        changed=$(git cherry -v HEAD "$REBASE_HEAD" "$REBASE_LIMIT" | grep '^+' || true)
    else
        git rebase --keep-empty "$dst" rebase
        changed=$(git cherry -v HEAD "$REBASE_HEAD" | grep '^+' || true)
    fi
    if test -n "$changed"
    then
        echo "Commits changed during rebase:"
        echo "--------------------------"
        echo "$changed" | sed 's/+ \([0-9a-f]\{7\}\)[0-9a-f]\+ /\1 /'
        echo "--------------------------"
        echo "They will cause conflicts at later rebases. Update your branch and try again"
        exit 1
    fi
}

finalize()
{
    rm -rf "$REPO_DIR/update-tmp-repo"
    rmdir "$REPO_DIR" || true
}

OPTS_SPEC="\
git push-update [options] <src>

--
h,help      Help

type!=      Update type to use [merge(default),rebase]
dest!=      Remote reference name to push to (default is tracked by current branch)
host!=      Host to be mentioned in merge message (hostname by default)
no-fork-point! Don't look for forkpoint while rebasing without explicit limit"

# git push-update remoteName branch
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@")"
OPT_HOST=
OPT_TYPE=merge
OPT_DEST=
OPT_NOFORKPOINT=no
while test "$1" != "--"
do
    case "$1" in
    --help|-h) exit;;
    --dest) OPT_DEST="$2"
        shift;;
    --host) OPT_HOST="$2"
        shift;;
    --type) OPT_TYPE="$2"
        shift;;
    --no-fork-point) OPT_NOFORKPOINT="yes";;
    *) echo "Unexpected option: $1" >/dev/stderr
        exit 1;;
    esac
    shift
done

if test $# -eq 1
then
    eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- -h)"
    exit
fi

case "$OPT_TYPE" in
merge) UPDATE_TYPE=MERGE;;
rebase) UPDATE_TYPE=REBASE;;
*) echo "Unknown update type: $type"
    exit 1;;
esac

if test -z "$OPT_HOST"
then
    OPT_HOST=$(hostname)
fi

shift

REPO_DIR=$(mktemp -d)
trap finalize 0
REPO="$REPO_DIR/update-tmp-repo"
prepare_$UPDATE_TYPE "$@"
resolve_remote_branch "$OPT_DEST"
git fetch -q "$REMOTE" "$REMOTE_BRANCH"
REMOTE_CURRENT=$(git rev-parse FETCH_HEAD)
prepare2_$UPDATE_TYPE
if ff_possible_$UPDATE_TYPE
then
    PUSH_COMMIT="$UPDATE_HEAD"
else
    git clone -q --no-checkout --shared . "$REPO"
    git push -q "$REPO" +"$UPDATE_HEAD":refs/heads/local +"$REMOTE_CURRENT":refs/heads/remote
    (
        cd "$REPO"
        git config core.sparseCheckout true
        echo "!/**" >".git/info/sparse-checkout"
        # it will add the files itself
        # but we need to prevent "error: Sparse checkout leaves no entry on working directory"
        git ls-tree -r --name-only remote | head -1 | checkout_from_quote >>.git/info/sparse-checkout
        git checkout -f -q remote
        update_$UPDATE_TYPE remote local
    )
    test "$?" -eq 0
    git fetch "$REPO" HEAD
    PUSH_COMMIT=$(git rev-parse FETCH_HEAD)
fi

if git -c advice.pushFetchFirst=false push "$REMOTE" "$PUSH_COMMIT":"$REMOTE_BRANCH"
then :
else
    git fetch -q "$REMOTE" "$REMOTE_BRANCH"
    REMOTE_OLD="$REMOTE_CURRENT"
    REMOTE_CURRENT=$(git rev-parse FETCH_HEAD)
    if test "$REMOTE_CURRENT" != "$PUSH_COMMIT"
    then
        if test "$REMOTE_OLD" != "$REMOTE_CURRENT"; then
            echo "Remote branch was updated by other user during preparing new updates"
            echo "please retry"
        fi
        exit 1
    fi
fi
